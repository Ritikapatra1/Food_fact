const harmfulIngredients = ["Palm Oil", "Sodium Nitrite", "BHA", "MSG", "High Fructose Corn Syrup", "Artificial Sweeteners"];
const neutralIngredients = ["Citric Acid", "Xanthan Gum", "Maltodextrin", "Natural Flavors", "Lecithin"];
const healthyIngredients = ["Honey", "Olive Oil", "Chia Seeds", "Green Tea", "Coconut Oil", "Garlic", "Whole Wheat"];


function fetchProductData() {
    const barcode = document.getElementById('barcode').value.trim();
    if (!barcode) {
        alert('Please enter a valid barcode number.');
        return;
    }
    
    fetch(`https://world.openfoodfacts.org/api/v2/product/${barcode}.json`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => displayProductData(data))
        .catch(error => {
            console.error('Error fetching product data:', error);
            document.getElementById('product-info').innerHTML = `<p class="error">An error occurred while fetching product data. Please try again later.</p>`;
        });
}

function displayProductData(data) {
    const productInfoDiv = document.getElementById('product-info');
    const ingredientsText = product.ingredients_text || '';
    const categorizedIngredients = categorizeIngredients(ingredientsText);
    productInfoDiv.innerHTML = ''; // Clear previous results

    if (data.status === 1) {
        const product = data.product;
        let productInfoHtml = `
            <h3>${product.product_name || 'N/A'}</h3>
            <p><strong>Brand:</strong> ${product.brands || 'N/A'}</p>
            <p><strong>Quantity:</strong> ${product.quantity || 'N/A'}</p>
            <p><strong>Packaging:</strong> ${product.packaging || 'N/A'}</p>
            <p><strong>Ingredients:</strong> ${product.ingredients_text || 'N/A'}</p>
            <p><strong>Categories:</strong> ${product.categories || 'N/A'}</p>
            <ul>${categorizedIngredients}</ul>
            <p><strong>Labels:</strong> ${product.labels || 'N/A'}</p>
            <p><strong>Origins:</strong> ${product.origins || 'N/A'}</p>
            <p><strong>Manufacturing Places:</strong> ${product.manufacturing_places || 'N/A'}</p>
            <p><strong>Stores:</strong> ${product.stores || 'N/A'}</p>
            <p><strong>Countries:</strong> ${product.countries || 'N/A'}</p>
            <p><strong>Nutritional Information:</strong></p>
            <ul>
                <li><strong>Energy:</strong> ${product.nutriments.energy || 'N/A'} kJ</li>
                <li><strong>Fat:</strong> ${product.nutriments.fat || 'N/A'} g</li>
                <li><strong>Saturated Fat:</strong> ${product.nutriments['saturated-fat'] || 'N/A'} g</li>
                <li><strong>Carbohydrates:</strong> ${product.nutriments.carbohydrates || 'N/A'} g</li>
                <li><strong>Sugars:</strong> ${product.nutriments.sugars || 'N/A'} g</li>
                <li><strong>Proteins:</strong> ${product.nutriments.proteins || 'N/A'} g</li>
                <li><strong>Salt:</strong> ${product.nutriments.salt || 'N/A'} g</li>
                <li><strong>Fiber:</strong> ${product.nutriments.fiber || 'N/A'} g</li>
            </ul>
            ${product.image_url ? `<img src="${product.image_url}" alt="${product.product_name || 'Product Image'}" loading="lazy">` : ''}
        `;
        productInfoDiv.innerHTML = productInfoHtml;
    } else {
        productInfoDiv.innerHTML = `<p class="error">Product not found. Please check the barcode and try again.</p>`;
    }
}

function categorizeIngredients(ingredientsText) {
    const ingredientsArray = ingredientsText.split(',').map(ing => ing.trim());
    let categorizedHtml = '';

    ingredientsArray.forEach(ingredient => {
        if (harmfulIngredients.includes(ingredient)) {
            categorizedHtml += `<li class="harmful">${ingredient} (Harmful)</li>`;
        } else if (neutralIngredients.includes(ingredient)) {
            categorizedHtml += `<li class="neutral">${ingredient} (Neutral)</li>`;
        } else if (healthyIngredients.includes(ingredient)) {
            categorizedHtml += `<li class="healthy">${ingredient} (Healthy)</li>`;
        } else {
            categorizedHtml += `<li>${ingredient} (Uncategorized)</li>`;
        }
    });

    return categorizedHtml;
}

function startScanner() {
    const scannerElement = document.querySelector('#scanner');
    scannerElement.innerHTML = ''; // Clear scanner container

    Quagga.init({
        inputStream: {
            name: "Live",
            type: "LiveStream",
            target: scannerElement,
            constraints: {
                facingMode: "environment",
                width: { ideal: 350 },
                height: { ideal: 480 }
            }
        },
        decoder: {
            readers: ["ean_reader", "upc_reader"]
        }
    }, function(err) {
        if (err) {
            console.error('Scanner initialization failed:', err);
            scannerElement.innerHTML = '<p class="error">Scanner initialization failed. Please try again later.</p>';
            return;
        }
        Quagga.start();
    });

    Quagga.onDetected(function(result) {
        const code = result.codeResult.code;
        document.getElementById('barcode').value = code;
        fetchProductData();
        Quagga.stop();
    });
}